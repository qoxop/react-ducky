/**
 * update api doc
 */
const del = require('del');
const path = require('path');
const { spawnSync } = require('child_process');
const { createInterface } = require("readline");
const { filesTransfer } = require('./utils');

const PACKAGE_FOLDER = path.resolve(__dirname, '../package');
const DOCUMENT_FOLDER = path.resolve(__dirname, '../websites/document');

(async function () {
  // build package
  spawnSync('pnpm', ['build'], { cwd: PACKAGE_FOLDER, stdio: 'inherit' });
  await del(path.resolve(DOCUMENT_FOLDER, './docs/api/*.md'))
  // copy api-doc
  await filesTransfer({
    from: path.resolve(PACKAGE_FOLDER, './.api-doc'),
    to: path.resolve(DOCUMENT_FOLDER, './docs/api'),
    transform: async (filename, buff) => {
      const id = filename.replace(/\.md$/, '');
      let text = buff.toString()
        .split('\n').map((line) => {
          if (line.indexOf('<!-- Do not edit this file. It is automatically generated by API Documenter. -->') > -1) {
            return ''
          }
          const homeLink = line.match(/\[Home\]\(.\/index\.md\) &gt; (.*)/);
          if (homeLink) {
            if (id === 'react-ducky') return ''
            return homeLink[1]
          }
          return line.replace(/<!--\s-->/g, '');
        })
        .join('\n')
      const header = [
        "---",
        `id: ${id}`,
        `title: ${id.replace('react-ducky.', '')}`,
        `hide_title: true`,
        "---"
      ].join('\n')
      return header + text;
    },
    filter: (filePath) => !/index\.md$/.test(filePath)
  })
})();

